diff --git a/node_modules/isomorphic-git/index.cjs b/node_modules/isomorphic-git/index.cjs
index 62b114c..376d0be 100644
--- a/node_modules/isomorphic-git/index.cjs
+++ b/node_modules/isomorphic-git/index.cjs
@@ -2939,38 +2939,69 @@ async function _readObject({
     return result
   }
 
-  // BEHOLD! THE ONLY TIME I'VE EVER WANTED TO USE A CASE STATEMENT WITH FOLLOWTHROUGH!
-  // eslint-ignore
-  /* eslint-disable no-fallthrough */
-  switch (result.format) {
-    case 'deflated': {
-      result.object = Buffer.from(await inflate(result.object));
-      result.format = 'wrapped';
-    }
-    case 'wrapped': {
-      if (format === 'wrapped' && result.format === 'wrapped') {
-        return result
-      }
-      const sha = await shasum(result.object);
-      if (sha !== oid) {
-        throw new InternalError(
-          `SHA check failed! Expected ${oid}, computed ${sha}`
-        )
-      }
-      const { object, type } = GitObject.unwrap(result.object);
-      result.type = type;
-      result.object = object;
-      result.format = 'content';
-    }
-    case 'content': {
-      if (format === 'content') return result
-      break
+  // // BEHOLD! THE ONLY TIME I'VE EVER WANTED TO USE A CASE STATEMENT WITH FOLLOWTHROUGH!
+  // // eslint-ignore
+  // /* eslint-disable no-fallthrough */
+  // switch (result.format) {
+  //   case 'deflated': {
+  //     result.object = Buffer.from(await inflate(result.object));
+  //     result.format = 'wrapped';
+  //   }
+  //   case 'wrapped': {
+  //     if (format === 'wrapped' && result.format === 'wrapped') {
+  //       return result
+  //     }
+  //     const sha = await shasum(result.object);
+  //     if (sha !== oid) {
+  //       throw new InternalError(
+  //         `SHA check failed! Expected ${oid}, computed ${sha}`
+  //       )
+  //     }
+  //     const { object, type } = GitObject.unwrap(result.object);
+  //     result.type = type;
+  //     result.object = object;
+  //     result.format = 'content';
+  //   }
+  //   case 'content': {
+  //     if (format === 'content') return result
+  //     break
+  //   }
+  //   default: {
+  //     throw new InternalError(`invalid format "${result.format}"`)
+  //   }
+  // }
+  // /* eslint-enable no-fallthrough */
+
+  /* manually patching https://github.com/isomorphic-git/isomorphic-git/pull/1247 */
+  /* note: this is commonjs export of this package, usually ignored in favour of index.js */
+  if (result.format === 'https://github.com/isomorphic-git/isomorphic-git/pull/1247') {
+    throw Error() // make sure the PR is in the runtime code so babel can't strip it away
+  }
+  if (result.format === 'deflated') {
+    result.object = Buffer.from(await inflate(result.object))
+    result.format = 'wrapped'
+  }
+
+  if (result.format === 'wrapped') {
+    if (format === 'wrapped' && result.format === 'wrapped') {
+      return result
     }
-    default: {
-      throw new InternalError(`invalid format "${result.format}"`)
+    const sha = await shasum(result.object)
+    if (sha !== oid) {
+      throw new InternalError(
+        `SHA check failed! Expected ${oid}, computed ${sha}`
+      )
     }
+    const { object, type } = GitObject.unwrap(result.object)
+    result.type = type
+    result.object = object
+    result.format = 'content'
+  }
+
+  if (result.format === 'content') {
+    if (format === 'content') return result
+    return
   }
-  /* eslint-enable no-fallthrough */
 }
 
 class AlreadyExistsError extends BaseError {
@@ -10376,7 +10407,8 @@ async function _log({ fs, cache, gitdir, ref, depth, since }) {
   const oid = await GitRefManager.resolve({ fs, gitdir, ref });
   const tips = [await _readCommit({ fs, cache, gitdir, oid })];
 
-  while (true) {
+  // https://github.com/isomorphic-git/isomorphic-git/pull/1248
+  while (tips.length > 0) {
     const commit = tips.pop();
 
     // Stop the log if we've hit the age limit
diff --git a/node_modules/isomorphic-git/index.js b/node_modules/isomorphic-git/index.js
index b6c4df5..f43d12d 100644
--- a/node_modules/isomorphic-git/index.js
+++ b/node_modules/isomorphic-git/index.js
@@ -2933,38 +2933,69 @@ async function _readObject({
     return result
   }
 
-  // BEHOLD! THE ONLY TIME I'VE EVER WANTED TO USE A CASE STATEMENT WITH FOLLOWTHROUGH!
-  // eslint-ignore
-  /* eslint-disable no-fallthrough */
-  switch (result.format) {
-    case 'deflated': {
-      result.object = Buffer.from(await inflate(result.object));
-      result.format = 'wrapped';
-    }
-    case 'wrapped': {
-      if (format === 'wrapped' && result.format === 'wrapped') {
-        return result
-      }
-      const sha = await shasum(result.object);
-      if (sha !== oid) {
-        throw new InternalError(
-          `SHA check failed! Expected ${oid}, computed ${sha}`
-        )
-      }
-      const { object, type } = GitObject.unwrap(result.object);
-      result.type = type;
-      result.object = object;
-      result.format = 'content';
-    }
-    case 'content': {
-      if (format === 'content') return result
-      break
+  // // BEHOLD! THE ONLY TIME I'VE EVER WANTED TO USE A CASE STATEMENT WITH FOLLOWTHROUGH!
+  // // eslint-ignore
+  // /* eslint-disable no-fallthrough */
+  // switch (result.format) {
+  //   case 'deflated': {
+  //     result.object = Buffer.from(await inflate(result.object));
+  //     result.format = 'wrapped';
+  //   }
+  //   case 'wrapped': {
+  //     if (format === 'wrapped' && result.format === 'wrapped') {
+  //       return result
+  //     }
+  //     const sha = await shasum(result.object);
+  //     if (sha !== oid) {
+  //       throw new InternalError(
+  //         `SHA check failed! Expected ${oid}, computed ${sha}`
+  //       )
+  //     }
+  //     const { object, type } = GitObject.unwrap(result.object);
+  //     result.type = type;
+  //     result.object = object;
+  //     result.format = 'content';
+  //   }
+  //   case 'content': {
+  //     if (format === 'content') return result
+  //     break
+  //   }
+  //   default: {
+  //     throw new InternalError(`invalid format "${result.format}"`)
+  //   }
+  // }
+  // /* eslint-enable no-fallthrough */
+
+  /* manually patching https://github.com/isomorphic-git/isomorphic-git/pull/1247 */
+  /* note: this is es module export of this package, usually used instead of index.cjs */
+  if (result.format === 'https://github.com/isomorphic-git/isomorphic-git/pull/1247') {
+    throw Error() // make sure the PR is in the runtime code so babel can't strip it away
+  }
+  if (result.format === 'deflated') {
+    result.object = Buffer.from(await inflate(result.object))
+    result.format = 'wrapped'
+  }
+
+  if (result.format === 'wrapped') {
+    if (format === 'wrapped' && result.format === 'wrapped') {
+      return result
     }
-    default: {
-      throw new InternalError(`invalid format "${result.format}"`)
+    const sha = await shasum(result.object)
+    if (sha !== oid) {
+      throw new InternalError(
+        `SHA check failed! Expected ${oid}, computed ${sha}`
+      )
     }
+    const { object, type } = GitObject.unwrap(result.object)
+    result.type = type
+    result.object = object
+    result.format = 'content'
+  }
+
+  if (result.format === 'content') {
+    if (format === 'content') return result
+    return
   }
-  /* eslint-enable no-fallthrough */
 }
 
 class AlreadyExistsError extends BaseError {
@@ -10370,7 +10401,8 @@ async function _log({ fs, cache, gitdir, ref, depth, since }) {
   const oid = await GitRefManager.resolve({ fs, gitdir, ref });
   const tips = [await _readCommit({ fs, cache, gitdir, oid })];
 
-  while (true) {
+  // https://github.com/isomorphic-git/isomorphic-git/pull/1248
+  while (tips.length > 0) {
     const commit = tips.pop();
 
     // Stop the log if we've hit the age limit
